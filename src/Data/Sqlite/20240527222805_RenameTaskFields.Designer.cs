// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTitan.Data;

#nullable disable

namespace Data.Sqlite
{
    [DbContext(typeof(TaskTitanDbContext))]
    [Migration("20240527222805_RenameTaskFields")]
    partial class RenameTaskFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("TaskTitan.Core.TTask", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Due")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Ended")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Scheduled")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Started")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Until")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Wait")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TaskTitan.Core.TTask", b =>
                {
                    b.OwnsOne("TaskTitan.Core.TTaskMetadata", "Metadata", b1 =>
                        {
                            b1.Property<string>("TTaskId")
                                .HasColumnType("TEXT");

                            b1.Property<bool?>("Blocked")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TTaskId");

                            b1.ToTable("tasks");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("TTaskId");
                        });

                    b.Navigation("Metadata")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
